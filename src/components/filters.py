from dash import dcc, html, Output, Input, callback
import dash_bootstrap_components as dbc
from datetime import datetime, timedelta
from src.database.queries.common import CHANNELS_QUERY, REGIONS_QUERY, CATEGORIES_QUERY, SEGMENTS_QUERY
import logging

logger = logging.getLogger(__name__)

def create_date_filter():
    """–°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏"""
    end_date = datetime.now().date()
    start_date = end_date - timedelta(days=30)
    
    return html.Div([
        html.Label("üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞", className="form-label"),
        
        # –í—ã–±–æ—Ä –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        dcc.Dropdown(
            id='period-selector',
            options=[
                {'label': 'üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞', 'value': '1d'},
                {'label': 'üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π', 'value': '7d'},
                {'label': 'üóìÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π', 'value': '30d'},
                {'label': 'üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π', 'value': '90d'},
                {'label': 'üìà –ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥', 'value': '365d'},
                {'label': '‚è≥ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è', 'value': 'all'},
                {'label': 'üéõÔ∏è –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥', 'value': 'custom'}
            ],
            value='30d',
            clearable=False,
            className="mb-2"
        ),
        
        # –í—ã–±–æ—Ä –¥–∞—Ç (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        html.Div([
            dcc.DatePickerRange(
                id='date-range',
                start_date=start_date,
                end_date=end_date,
                display_format='YYYY-MM-DD',
                style={'width': '100%'}
            ),
        ], id='date-range-container', style={'display': 'none'})
    ])

def create_issue_type_filter():
    """–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ–±—Ä–∞—â–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback"""
    return html.Div([
        html.Label("üì¨ –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è", className="form-label"),
        dcc.Dropdown(
            id='issue-type-filter',
            options=[],  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback
            value='all',
            placeholder="–í—Å–µ —Ç–∏–ø—ã",
            clearable=False,
            className="mb-2"
        )
    ])

def create_segment_filter():
    """–§–∏–ª—å—Ç—Ä –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É –∫–ª–∏–µ–Ω—Ç–∞"""
    return html.Div([
        html.Label("üë• –°–µ–≥–º–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–∞", className="form-label"),
        dcc.Dropdown(
            id='service-segment-filter',
            options=[],  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback
            value='all',
            placeholder="–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã",
            clearable=False,
            className="mb-2"
        )
    ])

def create_region_filter():
    """–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∫–ª–∏–µ–Ω—Ç–∞"""
    return html.Div([
        html.Label("üìç –†–µ–≥–∏–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞", className="form-label"),
        dcc.Dropdown(
            id='service-region-filter',
            options=[],  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback
            value='all',
            placeholder="–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã",
            clearable=False,
            className="mb-2"
        )
    ])


def create_category_filter():
    """–°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    return html.Div([
        html.Label("üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", className="form-label"),
        dcc.Dropdown(
            id='basic-category-filter',
            options=[],  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ callback
            value='all',
            clearable=False,
            placeholder="–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        ),
    ])

def create_supplier_filter():
    """–°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
    return html.Div([
        html.Label("üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫", className="form-label"),
        dcc.Dropdown(
            id='supplier-filter',
            options=[],
            value='all',
            clearable=False,
            placeholder="–í—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏"
        ),
    ])

def create_channel_filter():
    """–°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –∫–∞–Ω–∞–ª–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    return html.Div([
        html.Label("üåê –ö–∞–Ω–∞–ª", className="form-label"),
        dcc.Dropdown(
            id='channel-filter',
            options=[],  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ callback
            value='all',
            clearable=False,
            placeholder="–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤..."
        ),
    ])



# Callback'—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
def register_filter_callbacks(app):
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å callback'—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    
    @app.callback(
        [Output('date-range-container', 'style'),
         Output('date-range', 'start_date'),
         Output('date-range', 'end_date')],
        [Input('period-selector', 'value')]
    )
    def update_date_range(period):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        end_date = datetime.now().date()
        
        if period == 'custom':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            start_date = end_date - timedelta(days=30)
            return {'display': 'block'}, start_date, end_date
        
        # –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç –¥–ª—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        style = {'display': 'none'}
        
        if period == '1d':
            start_date = end_date - timedelta(days=1)
        elif period == '7d':
            start_date = end_date - timedelta(days=7)
        elif period == '90d':
            start_date = end_date - timedelta(days=90)
        elif period == '365d':
            start_date = end_date - timedelta(days=365)
        elif period == 'all':
            # –î–ª—è "–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è" —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
            start_date = datetime(2025, 1, 1).date()  # –ù–∞—á–∞–ª–æ 2025 –≥–æ–¥–∞
        else:  # 30d –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            start_date = end_date - timedelta(days=30)
            
        return style, start_date, end_date
    
    def load_filter_options(query, default_label="–í—Å–µ"):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–∞"""
        try:
            from src.database.connection import db_manager
            
            result = db_manager.execute_query(query)
            print(234)
            if not result.empty:
                column_name = result.columns[0]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
                options = [{'label': default_label, 'value': 'all'}]
                for _, row in result.iterrows():
                    options.append({
                        'label': row[column_name],
                        'value': row[column_name]
                    })
                logger.info(f"Loaded {len(options)} options from database")
                return options
            else:
                logger.warning(f"No data found for query: {query}")
                return [{'label': default_label, 'value': 'all'}]
                
        except Exception as e:
            return [{'label': default_label, 'value': 'all'}]
    
    @app.callback(
        Output('basic-category-filter', 'options'),
        [Input('app-load', 'children')],  # –¢—Ä–∏–≥–≥–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        prevent_initial_call=False
    )
    def load_categories(trigger):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return load_filter_options(CATEGORIES_QUERY, "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    @app.callback(
        Output('service-segment-filter', 'options'),
        Input('app-load', 'children'),
        prevent_initial_call=False
    )
    def load_segments(trigger):
        return load_filter_options(SEGMENTS_QUERY, "–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π
    @app.callback(
        Output('issue-type-filter', 'options'),
        Input('app-load', 'children'),
        prevent_initial_call=False
    )
    def load_issue_types(trigger):
        query = "SELECT DISTINCT issue_type FROM customer_support WHERE issue_type IS NOT NULL ORDER BY issue_type"
        return load_filter_options(query, "–í—Å–µ —Ç–∏–ø—ã")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
    @app.callback(
    Output('service-region-filter', 'options'),
    Input('app-load', 'children'),
    prevent_initial_call=False
    )
    def load_regions(trigger):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ user_segments"""
        return load_filter_options(REGIONS_QUERY, "–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã")
    
    @app.callback(
        Output('channel-filter', 'options'),
        [Input('app-load', 'children')],
        prevent_initial_call=False
    )
    def load_channels(trigger):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã —Ç—Ä–∞—Ñ–∏–∫–∞"""
        return load_filter_options(CHANNELS_QUERY, "–í—Å–µ –∫–∞–Ω–∞–ª—ã")
    
    @callback(
    Output('supplier-filter', 'options'),
    [Input('app-load', 'children')]
)
    def load_suppliers(n_intervals):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("Loading suppliers from database...")
            query = "SELECT DISTINCT supplier_name FROM suppliers WHERE supplier_name IS NOT NULL ORDER BY supplier_name"
            return load_filter_options(query, "–í—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏")
        except Exception as e:
            logger.error(f"Error loading suppliers: {e}")
            return [{'label': '–í—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏', 'value': 'all'}]
    
    return app